#include <iostream>
#define MAX 1000

class Queue {
    int front, rear, size;
    int capacity;
    int* array;

public:
    Queue(int capacity);
    ~Queue();
    void enqueue(int item);
    int dequeue();
    bool isFull();
    bool isEmpty();
};

Queue::Queue(int capacity) {
    this->capacity = capacity;
    front = size = 0;
    rear = capacity - 1;
    array = new int[capacity];
}

Queue::~Queue() {
    delete[] array;
}

void Queue::enqueue(int item) {
    if (isFull()) return;
    rear = (rear + 1) % capacity;
    array[rear] = item;
    size = size + 1;
}

int Queue::dequeue() {
    if (isEmpty()) return -1;
    int item = array[front];
    front = (front + 1) % capacity;
    size = size - 1;
    return item;
}

bool Queue::isFull() {
    return (size == capacity);
}

bool Queue::isEmpty() {
    return (size == 0);
}

int main() {
    Queue queue(10);
    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);
    std::cout << queue.dequeue() << " dequeued from queue\n";
    return 0;
}
