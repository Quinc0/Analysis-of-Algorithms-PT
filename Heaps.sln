#include <iostream>
#include <vector>

class MaxHeap {
    std::vector<int> heap;

    void heapifyUp(int index);
    void heapifyDown(int index);

public:
    void insert(int value);
    int extractMax();
    void printHeap();
};

void MaxHeap::heapifyUp(int index) {
    if (index && heap[(index - 1) / 2] < heap[index]) {
        std::swap(heap[index], heap[(index - 1) / 2]);
        heapifyUp((index - 1) / 2);
    }
}

void MaxHeap::heapifyDown(int index) {
    int left = 2 * index + 1;
    int right = 2 * index + 2;
    int largest = index;

    if (left < heap.size() && heap[left] > heap[largest]) {
        largest = left;
    }
    if (right < heap.size() && heap[right] > heap[largest]) {
        largest = right;
    }
    if (largest != index) {
        std::swap(heap[index], heap[largest]);
        heapifyDown(largest);
    }
}

void MaxHeap::insert(int value) {
    heap.push_back(value);
    heapifyUp(heap.size() - 1);
}

int MaxHeap::extractMax() {
    if (heap.empty()) return -1;

    int max = heap.front();
    heap[0] = heap.back();
    heap.pop_back();
    heapifyDown(0);

    return max;
}

void MaxHeap::printHeap() {
    for (int val : heap) {
        std::cout << val << " ";
    }
    std::cout << "\n";
}

int main() {
    MaxHeap heap;
    heap.insert(3);
    heap.insert(2);
    heap.insert(15);
    heap.insert(5);
    heap.insert(4);
    heap.insert(45);

    heap.printHeap();
    std::cout << heap.extractMax() << " extracted from heap\n";
    heap.printHeap();
    return 0;
}
